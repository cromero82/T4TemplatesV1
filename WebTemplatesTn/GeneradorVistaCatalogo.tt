<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cshtml" #>
<# 
var modelo = "GenPersona";
var controlador = "Personas";
var area = "General";
int tamanioGridBootstrap = 6;	// Ejemplo: col-md-6
UtilsT4 util = new UtilsT4();
var entidad = modelo.Substring(3, modelo.Length -3);
var entidadPresentacion = util.GetEntidadPresentacion(entidad);

// ---------------------
var areaDdl = ""; var controladorDdl = ""; var accionDdl = "";

SqlConnection conn = new SqlConnection();
string esquemaBase = "dbo";
conn.ConnectionString = "Data Source=CROMERO\\SQLEXPRESS;" + "Initial Catalog=ControlcBD;" + "User id=adminservertaxi;" + "Password=adm1ns3rv3rtaxi*;";

List<EstructuraTabla> info = util.GetEstructuraTabla(conn, modelo, esquemaBase);
//var prueba = UtilidadesGenerador.EntidadFormatoPresentacion(entidad);
var modulo = modelo.Substring(3);
 #> 
@model <#= modelo #>VM
@{ MvcForm form;  }

<div id="<#=modelo#>">    
    @if (ViewBag.Accion == "Insertar") { form = Ajax.BeginForm("Ins<#= modelo #>", "<#= controlador #>", new { Area = "<#= area #>" }, new AjaxOptions { HttpMethod = "POST", OnSuccess = "onSuccessGenerico", OnFailure = "onFailureGenerico" }, new { enable_placeholder = "" }); }
    else {                               form = Ajax.BeginForm("Upd<#= modelo #>", "<#= controlador #>", new { Area = "<#= area #>" }, new AjaxOptions { HttpMethod = "POST", OnSuccess = "onSuccessGenerico", OnFailure = "onFailureGenerico" }, new { enable_placeholder = "" }); }

	@*@if (ViewBag.Accion == "Insertar") { form = Ajax.BeginForm("Ins<#= modelo #>", "<#= controlador #>", new { Area = "<#= area #>" }, new AjaxOptions { HttpMethod = "POST", OnSuccess = "onSuccess<#= modelo #>", OnFailure = "onFailure<#= modelo #>" }, new { enable_placeholder = "" }); }
    else {                               form = Ajax.BeginForm("Upd<#= modelo #>", "<#= controlador #>", new { Area = "<#= area #>" }, new AjaxOptions { HttpMethod = "POST", OnSuccess = "onSuccess<#= modelo #>", OnFailure = "onFailure<#= modelo #>" }, new { enable_placeholder = "" }); }*@

    @using (form)
    {        
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title">@ViewBag.Accion <#= entidadPresentacion #></h4>
        </div>

        <div class="modal-body">
			@Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.Estregistro, new { Value = 1 })
            @Html.Partial("_ValidationSummaryPersonalizado")                
<#					
					int acumGrid = 0; int pos = -1;
					foreach (var item in info)
						{
						pos++;
						 if(acumGrid == 0 && pos > 0){
#>
			<div class="row">
<# 
						 }
							string NombreCampo = item.NombreColumna;							
							if(NombreCampo !="Id" && NombreCampo !="EstRegistro" && NombreCampo != "Estregistro"){  														
								switch (item.TipoDato)
								{
								case "int":
									var entidadContieneId = NombreCampo.Substring( NombreCampo.Length -2, 2) == "Id" ? true: false;	
										var entidadSinId = NombreCampo.Substring(1, NombreCampo.Length - 3);											
										var ultimaLetraEntidadSinId = entidadSinId.Substring(entidadSinId.Length-1, 1); 
										var terminacionControlador = ""; // as, es, is, os, us
									if (entidadContieneId) // Para generar dropdownlist
										{	
											var entidadSingular =  util.GetNombreSingular(entidadSinId);																								
											if(NombreCampo.Substring(0,1) == "T") 										
											{
												areaDdl = "ADMIN";												
												controladorDdl = "Tlistas";
												accionDdl = "GetListT" + entidadSingular;
											}else{												
												areaDdl = area;
												controladorDdl = NombreCampo;
												accionDdl = "GetList" + entidadSingular;
											}#>
				<div class="col-md-<#= tamanioGridBootstrap #>">
					<div class="form-group">
						@Html.LabelFor(m => m.<#= NombreCampo #>)
						@(Html.Kendo().DropDownListFor(model => model.<#= NombreCampo #>)                              
                              .DataTextField("Nombre")
                              .DataValueField("Id")
                              .OptionLabel("Seleccione...")
                              .DataSource(source =>
                              {
                                  source.Custom().Type("aspnetmvc-ajax")
                                      .Transport(t =>
                                      {
                                          t.Read(r => r.Action("<#= accionDdl #>", "<#= controladorDdl #>", new { Area = "<#= areaDdl #>" }).Type(HttpVerbs.Post));
                                      })
                                      .ServerFiltering(false)
                                      .Schema(s => { s.Data("Data").Total("Total").Errors("Errors"); })
                                      .Events(e => e.Error("handleOnErrorModelState"));
                              })
                              .Filter("contains")
                            .HtmlAttributes(new { style = "width:100%;", @class = "itemComponente" })
                        )				
						@Html.ValidationMessageFor(m => m.<#= NombreCampo #>)
					</div>
				</div>	
<#
acumGrid = acumGrid + tamanioGridBootstrap;
						if( acumGrid >= 12){
							acumGrid = 0;
#>
			</div>  

<# 	
                        }
									}else{  // Corresponde a un campo numerico entero
#>
				<div class="col-md-<#= tamanioGridBootstrap #>">
					<div class="form-group">
						@Html.LabelFor(m => m.<#= NombreCampo #>)
						@(Html.Kendo().NumericTextBoxFor(m => m.<#= NombreCampo #>)
							.Name("<#= NombreCampo #>")
							.Format("p0")
							.Min(1)
							.Max(9999)
							.Step(1)
							.Value(1)
							.HtmlAttributes(new { style = "width: 100%", title = "Ingrese <#= NombreCampo #>" })
						)
						@Html.ValidationMessageFor(m => m.<#= NombreCampo #>)
					</div>
				</div>	
<#
acumGrid = acumGrid + tamanioGridBootstrap;
						if( acumGrid >= 12){
							acumGrid = 0;
#>
			</div> 

<# 	
                        }										}										 
									break;
								case "date":
#>
				<div class="col-md-<#= tamanioGridBootstrap #>">
					<div class="form-group">
						@(Html.Kendo().DatePickerFor(m => m.<#= NombreCampo #>)
							.Max(String.Format("{0:d}", DateTime.Now))
						   //.Value(<#= NombreCampo #>)// String.Format("{0:d}", DateTime.Now))
						   //.Culture("es-CO")
						   //.DateInput()
						   .Format("dd/MM/yyyy")
						   .ParseFormats(new String[] { "dd/MM/yyyy" })
								//.Value(m.<#= NombreCampo #> ?? DateTime.Today)
								//.Events(e =>
								//{
								//    e.Change("change<#= NombreCampo #>");
								//})
								.HtmlAttributes(new
								{
									@class = "",
									style = "width: 100%",
									@maxlength = "10",
									@placeholder = "DD/MM/AAAA"
								})
							)
					</div> 
				</div>									
<#
acumGrid = acumGrid + tamanioGridBootstrap;
						if( acumGrid >= 12){
							acumGrid = 0;
#>
			</div>  

<# 	
                        }									
									break;
								default:	// varchars									
#>
				<div class="col-md-<#= tamanioGridBootstrap #>">
					<div class="form-group">
						@Html.LabelFor(m => m.<#= NombreCampo #>)
						@(Html.TextBoxFor(m => m.<#= NombreCampo #>, new { @class = "form-control", autocomplete = "off" }))
						@Html.ValidationMessageFor(m => m.<#= NombreCampo #>)
					</div>  
				</div>					
<#
acumGrid = acumGrid + tamanioGridBootstrap;
						if( acumGrid >= 12){
							acumGrid = 0;
#>
			</div>  

<# 	
                        }
									break;	
							}															
						}						
					}
#>
		</div>  
							
        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
            <button type="submit" class="btn btn-primary">Guardar</button>
        </div>
    }

    <!-- Inicialización script de vista -->
    <script>
	<#= controlador #>.initEdicion("@(ViewBag.Accion)");
    </script>
</div>

<#+
 public class EstructuraTabla
    {
        public string NombreColumna { get; set; }
        public string TipoDato { get; set; }
        public string TamanioColumna { get; set; }
        public string PrecisionNumerica { get; set; }
    }

public class UtilsT4
    {
		/// Obtiene Nombre en forma Singular
		/// Ejemplo: Persona(s), Enser(es)
		public string GetNombreSingular(string cadena){
			var ultimaLetraEntidadSinId = cadena.Substring(cadena.Length-1, 1); 
			var terminacionControlador = ""; // as, es, is, os, us									
			if( ultimaLetraEntidadSinId == "a" || ultimaLetraEntidadSinId == "e" ||
				ultimaLetraEntidadSinId == "i" || ultimaLetraEntidadSinId == "o" || 
				ultimaLetraEntidadSinId == "u"
				){
					terminacionControlador = "s";
			}else{
					terminacionControlador = "es";
			}
			return cadena + terminacionControlador;
        }	
		
		/// Obtiene nombre de presentacion
		///	Ejemplo: GenPersonaPrincipal devuelve: Persona Principal
		public string GetEntidadPresentacion(string entidad){
			var entidadPresentacion = entidad.Substring(0,1);
			for(int i= 0; i<entidad.Length;i++){		
				if(i>0){
					if (char.IsLower(entidad[i])){
						entidadPresentacion = string.Concat(entidadPresentacion, entidad[i]);
					}else{		
						entidadPresentacion = string.Concat(entidadPresentacion, " ",  entidad[i]);							
					}
				}
			}
			return entidadPresentacion;
		}

		public List<EstructuraTabla> GetEstructuraTabla(SqlConnection conn, string modelo, string esquemaBase){
			var columnName = "";
			var tipoDato = "";
			var tamanioColumna = "";
			var presicionNumerica = "";
			List<EstructuraTabla> info = new List<EstructuraTabla>();
			try
			{
				conn.Open();
				// get the database information
				DataTable databases = conn.GetSchema(SqlClientMetaDataCollectionNames.Tables, new string[] { null, null, null, "BASE TABLE" }); 
				SqlCommand sqlCmd;
				string sql = null;

				foreach (DataRow table in databases.Rows)
				{                    
					string tabla = string.Format("{0}.{1}", table["TABLE_SCHEMA"], table["TABLE_NAME"]);
					tabla = tabla.Replace(esquemaBase+".", "");
					sql = "Select * from " + tabla;

					if(tabla == modelo)
					{
						sqlCmd = new SqlCommand(sql, conn);
						SqlDataReader sqlReader = sqlCmd.ExecuteReader();
						DataTable schemaTable = sqlReader.GetSchemaTable();

						foreach (DataRow row in schemaTable.Rows)
						{
							foreach (DataColumn column in schemaTable.Columns)
							{
								if(column.ColumnName == "ColumnName"){
									columnName = row[column].ToString();
								 }
								 if(column.ColumnName == "DataTypeName"){
									tipoDato = row[column].ToString();
									//"DataTypeName = int"
								 }
								 if(column.ColumnName == "ColumnSize"){
									tamanioColumna = row[column].ToString();
									//"ColumnSize = 4"
								 } 
 
								  if(column.ColumnName == "NumericPrecision"){
									presicionNumerica = row[column].ToString();
									//"NumericPrecision = 10"
								 }
							}

							info.Add(new EstructuraTabla
							{
								NombreColumna = columnName,
								PrecisionNumerica = presicionNumerica,
								TamanioColumna = tamanioColumna,
								TipoDato = tipoDato
							});
							columnName="";       presicionNumerica="";   tamanioColumna="";       tipoDato="";

						}
						sqlReader.Close();
						sqlCmd.Dispose();
					}               
				}
				Console.WriteLine();
                
				conn.Close();
				return info;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.ToString());
				conn.Close();
				return null;
			}
        }
    }
#>
